# 100xEngineers Discovery Platform - Development Rules

## Project Structure Rules

### Backend (FastAPI)
- Keep all backend code in the `backend/` directory
- Use `app/` for application code
- Place models in `app/models/`
- Place services in `app/services/`
- Keep tests in `tests/` directory
- Use meaningful file names
- Always prefix API routes with `/api`

### Frontend (Streamlit)
- Keep all frontend code in the `frontend/` directory
- Place application code in `src/`
- Keep tests in `tests/` directory
- Use descriptive component names
- Handle both development and production configurations

## API Integration

### URL Handling
- Always handle trailing slashes in URLs
- Use proper URL joining methods
- Include /api prefix in backend routes
- Validate complete URL paths
- Log URL attempts during development

### Error Handling
- Implement comprehensive error handling
- Provide clear error messages
- Include debugging information in development
- Handle connection errors gracefully
- Log failed API attempts

## Environment Configuration

### Development
- Use .env files for local development
- Set clear default values
- Document all environment variables
- Include example configurations
- Test with local API endpoints

### Production
- Use platform-specific secrets management
- Handle missing environment variables gracefully
- Provide fallback configurations
- Validate required variables
- Test with production endpoints

## Code Style

### Python
- Follow PEP 8 guidelines
- Use type hints
- Write docstrings for functions and classes
- Keep functions small and focused
- Use meaningful variable names

### FastAPI
- Use Pydantic models for data validation
- Implement proper error handling
- Use appropriate HTTP status codes
- Document API endpoints
- Keep endpoints RESTful

### Streamlit
- Use proper form validation
- Show clear error messages
- Implement loading states
- Handle API errors gracefully
- Keep UI components organized

## Data Management

### Storage
- Use atomic operations for file writes
- Validate data before saving
- Implement proper error handling
- Keep backups of important data

### Environment Variables
- Use python-dotenv for development
- Use platform secrets for production
- Never commit sensitive data
- Document all required variables
- Use meaningful variable names

## Testing

### Backend Tests
- Write unit tests for models
- Test API endpoints
- Mock external services
- Test error conditions
- Validate URL paths

### Frontend Tests
- Test form validation
- Test API integration
- Test error handling
- Test UI components
- Verify environment handling

## Debugging

### Development Mode
- Show detailed error messages
- Display API URLs
- Log request attempts
- Show environment information
- Enable verbose logging

### Production Mode
- Hide sensitive information
- Use appropriate error messages
- Log errors securely
- Monitor API health
- Track performance metrics

## Security

### General
- Never commit secrets
- Use environment variables
- Validate user input
- Handle errors securely
- Protect sensitive routes

### API Security
- Implement rate limiting
- Use proper authentication
- Validate request data
- Handle sensitive data carefully
- Monitor API usage

## Performance

### Backend
- Use async where appropriate
- Implement caching
- Optimize database queries
- Monitor performance
- Handle timeouts properly

### Frontend
- Minimize API calls
- Use proper loading states
- Implement pagination
- Optimize UI updates
- Cache responses when appropriate

## Deployment

### Backend
- Validate API routes
- Test environment variables
- Monitor error rates
- Track API usage
- Implement health checks

### Frontend
- Test production builds
- Verify API connectivity
- Monitor user experience
- Track error rates
- Implement analytics
